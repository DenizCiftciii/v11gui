local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- Badge IDs
local badges = {
    ["You completed the game"] = 2124910071,
    ["Bloxy Cola"] = 2124910945,
    ["Defeat The Rat"] = 2124940134,
    ["unnamed"] = 2124940136,
    ["Complete the second chapter"] = 2126421424,
    ["Complete the third chapter"] = 4294830669625079,
    ["Complete a random maze"] = 3199152428705017
}

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CheeseEscapeHorrorGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Frame (Panel)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 380, 0, 420)
mainFrame.Position = UDim2.new(0, 10, 0, 60)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui
mainFrame.AnchorPoint = Vector2.new(0, 0)

local uicorner = Instance.new("UICorner", mainFrame)
uicorner.CornerRadius = UDim.new(0, 10)

local uiStroke = Instance.new("UIStroke", mainFrame)
uiStroke.Color = Color3.fromRGB(70, 70, 70)
uiStroke.Thickness = 2

-- Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0, 40, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.BorderSizePixel = 0
toggleButton.Parent = screenGui
toggleButton.AnchorPoint = Vector2.new(0, 0)
toggleButton.Text = "▶"
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 28
toggleButton.TextColor3 = Color3.fromRGB(200, 200, 200)

local toggleUICorner = Instance.new("UICorner", toggleButton)
toggleUICorner.CornerRadius = UDim.new(0, 10)

local toggleUIStroke = Instance.new("UIStroke", toggleButton)
toggleUIStroke.Color = Color3.fromRGB(70, 70, 70)
toggleUIStroke.Thickness = 2

-- Sections Container (holds pages)
local sectionsContainer = Instance.new("Frame")
sectionsContainer.Name = "SectionsContainer"
sectionsContainer.Size = UDim2.new(1, -20, 1, -80)
sectionsContainer.Position = UDim2.new(0, 10, 0, 70)
sectionsContainer.BackgroundTransparency = 1
sectionsContainer.Parent = mainFrame

-- Tabs and pages
local tabs = {}
local pages = {}
local currentTab = nil

local tabNames = {"Instant Badge", "Anti-Kick", "Credits"}

local function selectTab(name)
    if currentTab == name then return end

    for tabName, btn in pairs(tabs) do
        if tabName == name then
            btn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            pages[tabName].Visible = true
        else
            btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            btn.TextColor3 = Color3.fromRGB(180, 180, 180)
            pages[tabName].Visible = false
        end
    end

    currentTab = name
end

local function createTab(name, index, total)
    local btn = Instance.new("TextButton")
    btn.Name = name .. "Tab"
    btn.Size = UDim2.new(0, (mainFrame.AbsoluteSize.X - 40) / total, 0, 35)
    btn.Position = UDim2.new(0, 10 + ((mainFrame.AbsoluteSize.X - 40) / total) * (index - 1), 0, 20)
    btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    btn.BorderSizePixel = 0
    btn.Parent = mainFrame
    btn.Font = Enum.Font.GothamSemibold
    btn.TextSize = 18
    btn.Text = name
    btn.TextColor3 = Color3.fromRGB(180, 180, 180)
    btn.AutoButtonColor = true

    local uicorner = Instance.new("UICorner", btn)
    uicorner.CornerRadius = UDim.new(0, 6)

    btn.MouseEnter:Connect(function()
        if currentTab ~= name then
            btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    end)
    btn.MouseLeave:Connect(function()
        if currentTab ~= name then
            btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        end
    end)

    btn.MouseButton1Click:Connect(function()
        selectTab(name)
    end)

    tabs[name] = btn
    return btn
end

local function createPage(name)
    local page = Instance.new("Frame")
    page.Name = name .. "Page"
    page.Size = UDim2.new(1, 0, 1, 0)
    page.Position = UDim2.new(0, 0, 0, 0)
    page.BackgroundTransparency = 1
    page.Visible = false
    page.Parent = sectionsContainer
    pages[name] = page
    return page
end

-- Create tabs and pages dynamically
for i, tabName in ipairs(tabNames) do
    createTab(tabName, i, #tabNames)
    createPage(tabName)
end

-- Adjust tab sizes/positions on resize
screenGui:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
    local totalTabs = #tabNames
    for i, tabName in ipairs(tabNames) do
        local btn = tabs[tabName]
        btn.Size = UDim2.new(0, (mainFrame.AbsoluteSize.X - 40) / totalTabs, 0, 35)
        btn.Position = UDim2.new(0, 10 + ((mainFrame.AbsoluteSize.X - 40) / totalTabs) * (i - 1), 0, 20)
    end
end)

-- Toggle button behavior
local isOpen = false
local openPos = UDim2.new(0, 10, 0, 60)
local closePos = UDim2.new(0, -380, 0, 60)

local function toggleGui()
    if isOpen then
        local tween = TweenService:Create(mainFrame, TweenInfo.new(0.3), { Position = closePos })
        tween:Play()
        tween.Completed:Wait()
        mainFrame.Visible = false
        toggleButton.Text = "▶"
        isOpen = false
    else
        mainFrame.Visible = true
        local tween = TweenService:Create(mainFrame, TweenInfo.new(0.3), { Position = openPos })
        tween:Play()
        toggleButton.Text = "◀"
        isOpen = true
    end
end

toggleButton.MouseButton1Click:Connect(toggleGui)

mainFrame.Position = closePos
mainFrame.Visible = false

-- Instant Badge page contents
do
    local instantBadgePage = pages["Instant Badge"]

    local infoLabel = Instance.new("TextLabel")
    infoLabel.Parent = instantBadgePage
    infoLabel.Size = UDim2.new(1, -20, 0, 30)
    infoLabel.Position = UDim2.new(0, 10, 0, 10)
    infoLabel.BackgroundTransparency = 1
    infoLabel.Text = "Click the button to instantly get all badges."
    infoLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    infoLabel.Font = Enum.Font.Gotham
    infoLabel.TextSize = 16
    infoLabel.TextXAlignment = Enum.TextXAlignment.Left

    local statusLabel = Instance.new("TextLabel")
    statusLabel.Parent = instantBadgePage
    statusLabel.Size = UDim2.new(1, -20, 0, 25)
    statusLabel.Position = UDim2.new(0, 10, 0, 45)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: Waiting..."
    statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextSize = 14
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left

    local giveButton = Instance.new("TextButton")
    giveButton.Parent = instantBadgePage
    giveButton.Size = UDim2.new(0, 180, 0, 40)
    giveButton.Position = UDim2.new(0, 10, 0, 80)
    giveButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    giveButton.TextColor3 = Color3.fromRGB(230, 230, 230)
    giveButton.Text = "Give All Badges"
    giveButton.Font = Enum.Font.GothamBold
    giveButton.TextSize = 18
    giveButton.AutoButtonColor = true

    local giveButtonUICorner = Instance.new("UICorner", giveButton)
    giveButtonUICorner.CornerRadius = UDim.new(0, 8)

    giveButton.MouseEnter:Connect(function()
        giveButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
    end)
    giveButton.MouseLeave:Connect(function()
        giveButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    end)

    local function findGiveBadgeEvent()
        for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") and obj.Name == "GiveBadge" then
                return obj
            end
        end
        return nil
    end

    giveButton.MouseButton1Click:Connect(function()
        local giveBadgeEvent = findGiveBadgeEvent()
        if not giveBadgeEvent then
            statusLabel.Text = "Status: GiveBadge event not found!"
            return
        end

        for name, id in pairs(badges) do
            giveBadgeEvent:FireServer(id)
            task.wait(0.15)
        end
        statusLabel.Text = "Status: All badges given!"
    end)
end

-- Anti-Kick page contents
do
    local antiKickPage = pages["Anti-Kick"]

    local infoLabel = Instance.new("TextLabel")
    infoLabel.Parent = antiKickPage
    infoLabel.Size = UDim2.new(1, -20, 0, 30)
    infoLabel.Position = UDim2.new(0, 10, 0, 10)
    infoLabel.BackgroundTransparency = 1
    infoLabel.Text = "Prevents you from being kicked due to inactivity."
    infoLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    infoLabel.Font = Enum.Font.Gotham
    infoLabel.TextSize = 16
    infoLabel.TextXAlignment = Enum.TextXAlignment.Left

    local enableButton = Instance.new("TextButton")
    enableButton.Parent = antiKickPage
    enableButton.Size = UDim2.new(0, 180, 0, 40)
    enableButton.Position = UDim2.new(0, 10, 0, 60)
    enableButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    enableButton.TextColor3 = Color3.fromRGB(230, 230, 230)
    enableButton.Text = "Anti-Kick: Off"
    enableButton.Font = Enum.Font.GothamBold
    enableButton.TextSize = 18
    enableButton.AutoButtonColor = true

    local enableButtonUICorner = Instance.new("UICorner", enableButton)
    enableButtonUICorner.CornerRadius = UDim.new(0, 8)

    local antiKickEnabled = false
    local idledConnection

    enableButton.MouseEnter:Connect(function()
        if antiKickEnabled then
            enableButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
        else
            enableButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
        end
    end)

    enableButton.MouseLeave:Connect(function()
        if antiKickEnabled then
            enableButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
        else
            enableButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    end)

    enableButton.MouseButton1Click:Connect(function()
        antiKickEnabled = not antiKickEnabled

        if antiKickEnabled then
            local vu = game:GetService("VirtualUser")
            if not idledConnection then
                idledConnection = player.Idled:Connect(function()
                    vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(1)
                    vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                end)
            end
            enableButton.Text = "Anti-Kick: On"
            enableButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
            enableButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        else
            if idledConnection then
                idledConnection:Disconnect()
                idledConnection = nil
            end
            enableButton.Text = "Anti-Kick: Off"
            enableButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            enableButton.TextColor3 = Color3.fromRGB(230, 230, 230)
        end
    end)
end

-- Credits page contents
do
    local creditsPage = pages["Credits"]

    local creditsLabel = Instance.new("TextLabel")
    creditsLabel.Parent = creditsPage
    creditsLabel.Size = UDim2.new(1, -20, 0, 30)
    creditsLabel.Position = UDim2.new(0, 10, 0, 20)
    creditsLabel.BackgroundTransparency = 1
    creditsLabel.Text = "BlxzeScripts & BaySlyx"
    creditsLabel.Font = Enum.Font.GothamBold
    creditsLabel.TextSize = 22
    creditsLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    creditsLabel.TextXAlignment = Enum.TextXAlignment.Left
end

-- Başlangıçta Instant Badge sekmesini seç
selectTab("Instant Badge")

-- Draggable GUI
do
    local dragging = false
    local dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        local newX = math.clamp(startPos.X.Offset + delta.X, 0, workspace.CurrentCamera.ViewportSize.X - mainFrame.AbsoluteSize.X)
        local newY = math.clamp(startPos.Y.Offset + delta.Y, 0, workspace.CurrentCamera.ViewportSize.Y - mainFrame.AbsoluteSize.Y)
        mainFrame.Position = UDim2.new(startPos.X.Scale, newX, startPos.Y.Scale, newY)
    end

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end
